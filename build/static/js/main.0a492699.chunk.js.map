{"version":3,"sources":["context/authContext.jsx","components/generic/navbar.jsx","pages/404.jsx","components/generic/layout.jsx","pages/signIn.jsx","pages/signUp.jsx","context/storyContext.jsx","components/pagination/pagination.jsx","components/generic/alert.jsx","components/story/storyModal.jsx","components/story/storyList.jsx","components/story/allStory.jsx","pages/stories.jsx","components/story/storyView.jsx","pages/story.jsx","App.js","components/generic/theme.jsx","index.js"],"names":["require","createContext","useState","AuthContext","AuthProvider","props","toast","useToast","JSON","parse","localStorage","getItem","loggedIn","setLoggedIn","user","setUser","logoutHandler","e","setItem","stringify","window","removeItem","axios","post","finally","to","Provider","value","login","userDetails","unAuthorizeHandler","errCode","title","status","duration","isClosable","children","MyNavbar","useContext","checked","setChecked","display","changeDisplay","useColorMode","toggleColorMode","colorMode","navColor","useColorModeValue","color","menuColor","console","log","handleChange","MenuItems","as","RouterLink","mt","base","md","mr","style","textDecoration","boxShadow","top","right","overflowX","align","width","bgColor","w","position","justify","padding","bg","size","letterSpacing","flex","ml","pl","onChange","isChecked","colorScheme","fontSize","username","border","onClick","m","p","icon","zIndex","mb","pos","left","overflow","direction","pb","NotFound","src","Layout","h","minH","pr","signInSchema","yup","shape","required","min","matches","password","SignIn","show","setShow","useForm","resolver","yupResolver","mode","register","handleSubmit","errors","formState","reset","requestState","setRequestState","message","setMessage","textAlign","borderRadius","onSubmit","data","preventDefault","then","res","catch","err","response","noValidate","type","placeholder","name","disabled","href","signUpSchema","confirmPassword","oneOf","trim","email","max","SignUp","history","useHistory","push","autoFocus","StoryContext","StoryProvider","stories","setStories","storiesLoading","setStoriesLoading","singleStory","setSingleStory","storyLoading","setStoryLoading","getStories","get","postStories","story","updateStory","id","put","deleteStory","delete","getSingleStory","Pagination","storiesPerPage","totalStories","currentPage","paginate","pageNumbers","totalPage","Math","ceil","half","floor","maxL","minR","ansMin","ansMax","i","className","map","number","Alert","handleClose","close","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","confirm","my_modal","minWidth","transform","paddingBottom","backdropFilter","StoryModal","setTitle","setStory","disable","setDisable","opColor","document","getElementById","filter","useEffect","ReactDom","createPortal","storyId","pt","target","maxH","ResizeTextarea","StoryList","showModal","setShowModal","showAlert","setShowAlert","author","fromNow","fontStyle","postedAt","rel","background","EditIcon","DeleteIcon","lines","more","less","whiteSpace","noOfLines","AllStory","setCurrentPage","indexOfLastStory","indexOfFirstStory","currentStories","slice","rounded","shadow","key","length","pageNumber","Stories","StoryView","useParams","Story","App","exact","path","component","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0a492699.chunk.js","sourcesContent":["import { useToast } from '@chakra-ui/react';\nimport axios from 'axios';\nimport { Redirect } from 'react-router-dom';\n\nconst { createContext, useState } = require('react');\n\nconst AuthContext = createContext();\n\nconst AuthProvider = (props) => {\n    const toast = useToast();\n    const [loggedIn, setLoggedIn] = useState(JSON.parse(localStorage.getItem('loggedIn')) || false);\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('user')) || false);\n    const login = (userDetails) => {\n        setLoggedIn(true);\n        localStorage.setItem('loggedIn', JSON.stringify(true));\n        setUser(userDetails);\n        localStorage.setItem('user', JSON.stringify(userDetails));\n    };\n\n    const logout = () => {\n        localStorage.setItem('loggedIn', JSON.stringify(false));\n        setLoggedIn(false);\n        window.localStorage.removeItem('user');\n        setUser(null);\n    };\n\n    const logoutHandler = (e) => {\n        logout();\n        axios.post(`/api/v1/users/logout`).finally(() => <Redirect to=\"/\" />);\n    };\n    const unAuthorizeHandler = (errCode) => {\n        if (errCode === 401) {\n            logoutHandler();\n            toast({\n                title: 'Your session is expired. Please login to continue!',\n                status: 'error',\n                duration: 3000,\n                isClosable: true,\n            });\n            // return <Redirect to=\"/signin\" />;\n        }\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                loggedIn,\n                login,\n                logoutHandler,\n                unAuthorizeHandler,\n                user,\n            }}\n        >\n            {props.children}\n        </AuthContext.Provider>\n    );\n};\n\nexport { AuthContext, AuthProvider };\n","import { CloseIcon, HamburgerIcon } from '@chakra-ui/icons';\nimport {\n    Button,\n    Flex,\n    Heading,\n    IconButton,\n    Link,\n    Switch,\n    Text,\n    useColorMode,\n    useColorModeValue\n} from '@chakra-ui/react';\nimport { useContext, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { AuthContext } from '../../context/authContext';\n\nconst MyNavbar = (props) => {\n    const { loggedIn, logoutHandler, user } = useContext(AuthContext);\n    const [checked, setChecked] = useState(JSON.parse(localStorage.getItem('dark_theme')) || false);\n    const [display, changeDisplay] = useState('none');\n    const { colorMode, toggleColorMode } = useColorMode();\n    const navColor = useColorModeValue('gray.800', 'gray.500');\n    const color = useColorModeValue('white', 'gray.800');\n    const menuColor = useColorModeValue('gray.500', 'gray.800');\n    console.log(color);\n    const handleChange = () => {\n        setChecked(!checked);\n        localStorage.setItem('dark_theme', JSON.stringify(!checked));\n        toggleColorMode();\n    };\n\n    const MenuItems = (props) => (\n        <Link\n            as={RouterLink}\n            mt={{ base: 4, md: 0 }}\n            mr={6}\n            display=\"block\"\n            to={props.to}\n            style={{ color: '#FFF', textDecoration: 'none' }}\n            boxShadow=\"none !important\"\n        >\n            {props.children}\n        </Link>\n    );\n\n    return (\n        <Flex top=\"1rem\" right=\"1rem\" overflowX=\"hidden\">\n            <Flex align=\"center\" width=\"100vw\" bgColor={navColor}>\n                <Flex\n                    display={['none', 'none', 'flex', 'flex']}\n                    w=\"100vw\"\n                    mt={0}\n                    position=\"relative\"\n                    align=\"center\"\n                    justify=\"space-between\"\n                    padding=\"0.8rem\"\n                    boxShadow=\"2xl\"\n                    bg={navColor}\n                    color=\"white\"\n                >\n                    <Flex align=\"center\" mr={0}>\n                        <Heading as=\"h1\" size=\"lg\" letterSpacing=\"-.1rem\">\n                            <MenuItems to=\"/\">StoryHub</MenuItems>\n                        </Heading>\n                    </Flex>\n                  \n                    <Switch flex=\"1\" ml=\"2px\" pl=\"1px\" onChange={handleChange} isChecked={checked} />\n                   \n                    {user && (\n                        <Button boxShadow=\"none !important\" colorScheme=\"white\" ml=\"auto\" mr=\"0\">\n                            <Text fontSize=\"17px\" color=\"white\">\n                                {user.username}\n                            </Text>\n                        </Button>\n                    )}\n                    {!loggedIn && (\n                        <Button as={RouterLink} to=\"/signin\" bg=\"transparent\" border=\"1px\" mr={5}>\n                            Log In\n                        </Button>\n                    )}\n                    {loggedIn && (\n                        <Button onClick={logoutHandler} bg={navColor} border=\"1px\" mr={5}>\n                            Log Out\n                        </Button>\n                    )}\n                </Flex>\n                {display === 'none' && (\n                    <IconButton\n                        aria-label=\"Open Menu\"\n                        size=\"lg\"\n                        m={2}\n                        p={5}\n                        icon={<HamburgerIcon />}\n                        color={menuColor}\n                        bgColor={navColor}\n                        onClick={() => changeDisplay('flex')}\n                        display={['flex', 'flex', 'none', 'none']}\n                        zIndex={2}\n                    />\n                )}\n                {display === 'none' && \n                  <Flex align=\"center\" mb={4} display={['flex', 'flex', 'none', 'none']}>\n                        <Heading as=\"h1\" size=\"lg\" letterSpacing=\"-.1rem\">\n                            <MenuItems to=\"/\">StoryHub</MenuItems>\n                        </Heading>\n                    </Flex>}\n            </Flex>\n            <Flex bgColor={navColor}>\n                {display === 'none' && user && (\n                    <Flex align=\"center\">\n                        <Button boxShadow=\"none !important\" colorScheme=\"white\">\n                            <Text fontSize=\"17px\" color=\"white\">\n                                {user.username}\n                            </Text>\n                        </Button>\n                    </Flex>\n                )}\n            </Flex>\n            <Flex\n                w=\"100vw\"\n                display={display}\n                bgColor={navColor}\n                color=\"white\"\n                zIndex={20}\n                pos=\"relative\"\n                top=\"0\"\n                left=\"0\"\n                overflow=\"none\"\n                direction=\"column\"\n            >\n                <Flex justify=\"flex-end\">\n                    <IconButton\n                        mt={2}\n                        mr={2}\n                        aria-label=\"Open Menu\"\n                        bgColor={navColor}\n                        size=\"lg\"\n                        icon={<CloseIcon />}\n                        onClick={() => changeDisplay('none')}\n                    />\n                </Flex>\n\n                <Flex direction=\"column\" align=\"center\" width=\"100vw\" pb=\"4\">\n                    {!loggedIn && (\n                        <Flex>\n                            <Button\n                              onClick={() => changeDisplay('none')}\n                                mb={3}\n                                as={RouterLink}\n                                to=\"/signin\"\n                                bg=\"transparent\"\n                                border=\"1px\"\n                            >\n                                Log In\n                            </Button>\n                        </Flex>\n                    )}\n                    {loggedIn && (\n                        <Flex>\n                            <Button mb={3} onClick={()=>{changeDisplay('none');logoutHandler()}} bg={navColor} border=\"1px\">\n                                Log Out\n                            </Button>\n                        </Flex>\n                    )}\n                    <Flex>\n                        {/* <Button > */}\n                        <Switch  onChange={()=>{changeDisplay('none');handleChange()}} isChecked={checked} />\n                        {/* </Button> */}\n                    </Flex>\n                </Flex>\n            </Flex>\n        </Flex>\n    );\n};\n\nexport default MyNavbar;\n","import { Image } from '@chakra-ui/react';\n\nconst NotFound = (props) => <Image src=\"/404.jpg\" />;\n\nexport default NotFound;\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nconst Layout = (props) => (\n    <Box bg=\"\" h=\"100%\" minH=\"100vh\" pl=\"10%\" pr=\"10%\">\n        {props.children}\n    </Box>\n);\n\nexport default Layout;\n","import {\n    Box,\n    Button,\n    Center,\n    Heading,\n    Input,\n    InputGroup,\n    InputRightElement,\n    Link,\n    Spinner,\n    Text,\n    useColorModeValue,\n    useToast\n} from '@chakra-ui/react';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport axios from 'axios';\nimport { useContext, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Redirect } from 'react-router-dom';\nimport * as yup from 'yup';\nimport Layout from '../components/generic/layout';\nimport { AuthContext } from '../context/authContext';\n\nconst signInSchema = yup.object().shape({\n    username: yup\n        .string()\n        .required()\n        .min(5, 'username must be min 5 chars.')\n        .matches(/^\\S+$/, \"Username can't contain white space\"),\n\n    password: yup\n        .string()\n        .required('No password provided.')\n        .min(8, 'Password should be min 8 chars.'),\n});\n\nconst SignIn = (props) => {\n    const [show, setShow] = useState(false);\n    const color = useColorModeValue('gray.100', 'gray.600');\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n        reset,\n    } = useForm({\n        resolver: yupResolver(signInSchema),\n        mode: 'onChange',\n    });\n    const [requestState, setRequestState] = useState('not-requested');\n    const [message, setMessage] = useState(null);\n    const toast = useToast();\n    const { loggedIn, login } = useContext(AuthContext);\n    const URL = process.env.REACT_APP_URL;\n    const handleClick = () => setShow(!show);\n\n    const signIn = (data, e) => {\n        e.preventDefault();\n        setRequestState('loading');\n        const { username, password } = data;\n        axios\n            .post(`/api/v1/users/login`, { username, password })\n            .then((res) => {\n                setRequestState('loaded');\n                login(res.data.data);\n                toast({\n                    title: 'Logged In successfully',\n                    status: 'success',\n                    duration: 3000,\n                    isClosable: true,\n                });\n            })\n            .catch((err) => {\n                setRequestState('error');\n                if (err.response.status == 500) setMessage('Something went wrong!');\n                else setMessage(err.response.data.message);\n            });\n    };\n\n    if (loggedIn) return <Redirect to=\"/\" />;\n    return (\n        <Layout>\n            <Center h={['75vh', '85vh']}>\n                <Box boxShadow=\"dark-lg\" textAlign=\"center\" bg={color} borderRadius={5} p={10}>\n                    <Heading size=\"md\" m={1}>\n                        Log In\n                    </Heading>\n                    <form onSubmit={handleSubmit(signIn)} noValidate>\n                        <InputGroup m={1}>\n                            <Input\n                                type=\"text\"\n                                placeholder=\"Username\"\n                                name=\"username\"\n                                required\n                                {...register('username')}\n                            />\n                        </InputGroup>\n                        <p>\n                            <Text color=\"red\">{errors.username?.message}</Text>\n                        </p>\n                        <InputGroup m={1}>\n                            <Input\n                                type={show ? 'text' : 'password'}\n                                placeholder=\"Password\"\n                                name=\"password\"\n                                show={show}\n                                required\n                                {...register('password')}\n                            />\n                            <InputRightElement width=\"4.5rem\">\n                                <Button\n                                    color=\"black\"\n                                    boxShadow=\"none !important\"\n                                    h=\"1.75rem\"\n                                    size=\"sm\"\n                                    onClick={handleClick}\n                                >\n                                    {show ? 'Hide' : 'Show'}\n                                </Button>\n                            </InputRightElement>\n                        </InputGroup>\n\n                        <p>\n                            <Text color=\"red\">{errors.password?.message}</Text>\n                        </p>\n                        <Text display=\"block\" fontSize=\"md\" color=\"red\">\n                            {message}\n                        </Text>\n                        <Button\n                            colorScheme=\"teal\"\n                            size=\"sm\"\n                            m={1}\n                            mb={4}\n                            disabled={requestState === 'loading' ? 1 : 0}\n                            type=\"submit\"\n                        >\n                            {requestState === 'loading' && <Spinner mr={3} />}Sign In\n                        </Button>\n                    </form>\n                    <Text fontSize=\"sm\">\n                        <Link color=\"teal.500\" href=\"/signup\" m={1}>\n                            Don't have an account?\n                        </Link>\n                    </Text>\n                </Box>\n            </Center>\n        </Layout>\n    );\n};\n\nexport default SignIn;\n","import {\n    Box,\n    Button,\n    Center,\n    Heading,\n    Input,\n    InputGroup,\n    InputRightElement,\n    Spinner,\n    Text,\n    useColorModeValue,\n    useToast\n} from '@chakra-ui/react';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport axios from 'axios';\nimport { useContext, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport * as yup from 'yup';\nimport Layout from '../components/generic/layout';\nimport { AuthContext } from '../context/authContext';\n\nconst signUpSchema = yup.object().shape({\n    username: yup\n        .string()\n        .required('Username is required!')\n        .min(5, 'username must be min 5 chars.')\n        .matches(/^\\S+$/, \"Username can't contain white space\"),\n    password: yup\n        .string()\n        .required('Password is required!')\n        .min(8, 'Password should be min 8 chars.'),\n    confirmPassword: yup\n        .string()\n        .required('Password confirmation is required!')\n        .oneOf([yup.ref('password'), null], 'Passwords must match'),\n    name: yup.string().trim().required('Name is required!'),\n    email: yup.string().email('Must be a valid email').max(255).required('Email is required!'),\n});\n\nconst SignUp = (props) => {\n    const color = useColorModeValue('gray.100', 'gray.600');\n    const history = useHistory();\n    const [show, setShow] = useState(false);\n    const { loggedIn, login } = useContext(AuthContext);\n    const [requestState, setRequestState] = useState('not-requested');\n    const [message, setMessage] = useState(null);\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n        reset,\n    } = useForm({\n        resolver: yupResolver(signUpSchema),\n        mode: 'onChange',\n    });\n    const toast = useToast();\n    const handleClick = () => setShow(!show);\n    const signUp = (data, e) => {\n        e.preventDefault();\n        const { email, username, name, password, confirmPassword } = data;\n        setRequestState('loading');\n        axios\n            .post(`/api/v1/users`, { email, username, name, password, confirmPassword })\n            .then((res) => {\n                setRequestState('loaded');\n                toast({\n                    title: 'Your Account is created! Please login to continue',\n                    status: 'success',\n                    duration: 3000,\n                    isClosable: true,\n                });\n                history.push('/signin');\n            })\n            .catch((err) => {\n                setRequestState('error');\n                if (err.response.status == 500) setMessage('Something went wrong!');\n                else setMessage(err.response.data.message);\n            });\n    };\n\n    if (loggedIn) return <Redirect to=\"/\" />;\n    return (\n        <Layout >\n            <Center h={['75vh', '85vh']}>\n                <Box   zIndex={30}boxShadow=\"dark-lg\" textAlign=\"center\" bg={color} borderRadius={5} p={10}>\n                    <Heading size=\"md\" m={3}>\n                        Create Your Account\n                    </Heading>\n                    <form onSubmit={handleSubmit(signUp)} noValidate>\n                        <Input\n                            placeholder=\"Email\"\n                            type=\"email\"\n                            m={1}\n                            name=\"email\"\n                            required\n                            autoFocus\n                            {...register('email')}\n                        />\n                        <p>\n                            <Text color=\"red\">{errors.email?.message}</Text>\n                        </p>\n                        <InputGroup m={1}>\n                            <Input\n                                type=\"text\"\n                                placeholder=\"Name\"\n                                name=\"name\"\n                                required\n                                {...register('name')}\n                            />\n                        </InputGroup>\n                        <p>\n                            <Text color=\"red\">{errors.name?.message}</Text>\n                        </p>\n                        <InputGroup m={1}>\n                            <Input\n                                type=\"text\"\n                                placeholder=\"Username\"\n                                name=\"username\"\n                                required\n                                {...register('username')}\n                            />\n                        </InputGroup>\n                        <p>\n                            <Text color=\"red\">{errors.username?.message}</Text>\n                        </p>\n                        <InputGroup m={1}>\n                            <Input\n                                type={show ? 'text' : 'password'}\n                                placeholder=\"Password\"\n                                name=\"password\"\n                                required\n                                {...register('password')}\n                            />\n                            <InputRightElement width=\"4.5rem\">\n                                <Button\n                                    boxShadow=\"none !important\"\n                                    h=\"1.75rem\"\n                                    size=\"sm\"\n                                    onClick={handleClick}\n                                >\n                                    {show ? 'Hide' : 'Show'}\n                                </Button>\n                            </InputRightElement>\n                        </InputGroup>\n                        <p>\n                            <Text color=\"red\">{errors.password?.message}</Text>\n                        </p>\n                        <InputGroup m={1}>\n                            <Input\n                                type={show ? 'text' : 'password'}\n                                placeholder=\"Confirm Password\"\n                                name=\"confirmPassword\"\n                                required\n                                {...register('confirmPassword')}\n                            />\n                        </InputGroup>\n                        <p>\n                            <Text color=\"red\">{errors.confirmPassword?.message}</Text>\n                        </p>\n\n                        {requestState === 'error' && (\n                            <Text display=\"block\" fontSize=\"md\" color=\"tomato\">\n                                {message}\n                            </Text>\n                        )}\n                        <Button\n                            colorScheme=\"teal\"\n                            size=\"sm\"\n                            m={1}\n                            mb={4}\n                            disabled={requestState === 'loading' ? 1 : 0}\n                            type=\"submit\"\n                        >\n                            {requestState === 'loading' && <Spinner mr={3} />}Sign Up\n                        </Button>\n                    </form>\n                </Box>\n            </Center>\n        </Layout>\n    );\n};\n\nexport default SignUp;\n","import axios from 'axios';\nimport { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AuthContext } from './authContext';\n\nconst { createContext, useState } = require('react');\n\nconst StoryContext = createContext();\n\nconst StoryProvider = (props) => {\n    const { unAuthorizeHandler } = useContext(AuthContext);\n    const history = useHistory();\n    const [stories, setStories] = useState([]);\n    const [storiesLoading, setStoriesLoading] = useState(true);\n    const [singleStory, setSingleStory] = useState([]);\n    const [storyLoading, setStoryLoading] = useState(true);\n\n    const getStories = () => {\n        axios\n            .get(`/api/v1/stories`)\n            .then((res) => {\n                setStories(res.data.data);\n                setStoriesLoading(false);\n            })\n            .catch((err) => console.log(err));\n    };\n    const getSingleStory = (id) => {\n        axios\n            .get(`/api/v1/stories/${id}`)\n            .then((res) => {\n                setSingleStory(res.data.data);\n                setStoryLoading(false);\n            })\n            .catch((err) => {\n                setSingleStory(false);\n                setStoryLoading(false);\n                console.log(err);\n            });\n    };\n\n    const postStories = (story) => {\n        axios\n            .post(`/api/v1/stories`, story)\n            .then((res) => {\n                getStories();\n            })\n            .catch((err) => {\n                unAuthorizeHandler(err.response.status);\n            });\n    };\n\n    const updateStory = (story, id) => {\n        axios\n            .put(`/api/v1/stories/${id}`, story)\n            .then((res) => {\n                getStories();\n                setSingleStory(res.data.data);\n            })\n            .catch((err) => {\n                unAuthorizeHandler(err.response.status);\n            });\n    };\n    const deleteStory = (id) => {\n        axios\n            .delete(`/api/v1/stories/${id}`)\n            .then((res) => {\n                getStories();\n                history.push('/');\n            })\n            .catch((err) => {\n                unAuthorizeHandler(err.response.status);\n            });\n    };\n    return (\n        <StoryContext.Provider\n            value={{\n                getStories,\n                stories,\n                storiesLoading,\n                postStories,\n                updateStory,\n                deleteStory,\n                singleStory,\n                getSingleStory,\n                storyLoading,\n            }}\n        >\n            {props.children}\n        </StoryContext.Provider>\n    );\n};\n\nexport { StoryContext, StoryProvider };\n","import React from 'react';\n\nconst Pagination = ({ storiesPerPage, totalStories, currentPage, paginate }) => {\n    const pageNumbers = [];\n    const totalPage = Math.ceil(totalStories / storiesPerPage);\n    let left = Math.min(10, totalPage);\n    const half = Math.floor(left / 2);\n    let maxL = 0;\n    let minR = totalPage;\n    let ansMin = totalPage;\n    let ansMax = totalPage;\n    for (let i = currentPage; i > Math.max(0, currentPage - half); i--) {\n        left--;\n        maxL = i;\n        ansMin = i;\n    }\n    for (let i = currentPage + 1; i <= Math.min(totalPage, currentPage + half); i++) {\n        left--;\n        minR = i;\n        ansMax = i;\n    }\n    maxL--;\n    while (left > 0 && maxL > 0) {\n        left--;\n        ansMin = maxL;\n        maxL--;\n    }\n    minR++;\n    while (left > 0 && minR <= totalPage) {\n        left--;\n        ansMax = minR;\n        minR++;\n    }\n    for (let i = ansMin; i <= ansMax; i++) {\n        pageNumbers.push(i);\n    }\n    return (\n        <nav>\n            <ul className=\"pagination\">\n                {pageNumbers.map((number) => (\n                    <li key={number} className=\"page-item\">\n                        <a onClick={() => paginate(number)} className=\"page-link\">\n                            {number}\n                        </a>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    );\n};\n\nexport default Pagination;\n","import { useColorModeValue } from '@chakra-ui/react';\nimport { Button, Modal } from 'react-bootstrap';\n\nconst Alert = (props) => {\n    const color = useColorModeValue('bg-white', 'bg-dark');\n    const handleClose = () => {\n        props.close();\n    };\n    const handleYes = () => {\n        props.close();\n        props.confirm();\n    };\n    return (\n        <>\n            <Modal show={props.show} onHide={handleClose}>\n                <Modal.Header closeButton className={color}>\n                    <Modal.Title>Confirmation</Modal.Title>\n                </Modal.Header>\n                <Modal.Body className={color}> Are you sure to perform this action?</Modal.Body>\n                <Modal.Footer className={color}>\n                    <Button variant=\"primary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"danger\" onClick={handleYes}>\n                        Yes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default Alert;\n","import { Box, Button, Input, useColorModeValue } from '@chakra-ui/react';\nimport { React, useContext, useEffect, useState } from 'react';\nimport ReactDom from 'react-dom';\nimport ResizeTextarea from 'react-textarea-autosize';\nimport { StoryContext } from '../../context/storyContext';\n\nconst my_modal = {\n    position: 'fixed',\n    top: '50%',\n    left: '50%',\n    width: '50vw',\n    minWidth: '300px',\n    transform: 'translate(-50%, -50%)',\n    padding: '12px',\n    paddingBottom: '8px',\n    zIndex: 1000,\n    align: 'center',\n    backdropFilter: 'blur(3px)',\n};\n\nconst StoryModal = (props) => {\n    const { postStories, updateStory } = useContext(StoryContext);\n    const [title, setTitle] = useState(props.title);\n    const [story, setStory] = useState(props.story);\n    const [disable, setDisable] = useState(true);\n    const color = useColorModeValue('gray.100', 'gray.600');\n    const opColor = useColorModeValue('gray.500', 'gray.300');\n    document.getElementById('root').style.filter = 'blur(3px)';\n\n    useEffect(() => {\n        if (story && story.trim() && title && title.trim()) setDisable(false);\n        else setDisable(true);\n    }, [story, title]);\n\n    const handlePostSubmit = (e) => {\n        e.preventDefault();\n        props.close();\n        setTitle('');\n        setStory('');\n        postStories({ title, story });\n        setDisable(true);\n    };\n    const handleUpdateSubmit = (e) => {\n        e.preventDefault();\n        props.close();\n        updateStory({ title, story }, props.storyId);\n    };\n\n    return ReactDom.createPortal(\n        <Box style={my_modal} bg={opColor} boxShadow=\"dark-lg\">\n            <form onSubmit={props.storyId ? handleUpdateSubmit : handlePostSubmit} pt={5}>\n                <Input\n                    name=\"title\"\n                    value={title}\n                    required\n                    onChange={(e) => setTitle(e.target.value)}\n                    bg={color}\n                    placeholder=\"Title\"\n                />\n                <Input\n                    type=\"textarea\"\n                    value={story}\n                    required\n                    name=\"story\"\n                    onChange={(e) => setStory(e.target.value)}\n                    bg={color}\n                    minH=\"20vh\"\n                    maxH=\"70vh\"\n                    as={ResizeTextarea}\n                    colorScheme=\"white\"\n                    placeholder=\"Story\"\n                />\n                <Button type=\"submit\" disabled={disable} colorScheme=\"green\" size=\"sm\">\n                    {props.storyId ? 'UPDATE' : 'POST'}\n                </Button>\n                <Button size=\"sm\" onClick={props.close} boxShadow=\"md\" bg={color}>\n                    Cancel\n                </Button>\n            </form>\n        </Box>,\n        document.getElementById('portal')\n    );\n};\n\nexport default StoryModal;\n","import { DeleteIcon, EditIcon } from '@chakra-ui/icons';\nimport {\n    Avatar,\n    Box,\n    Button,\n    Center,\n    Flex,\n    Heading,\n    Icon,\n    Stack,\n    Text,\n    useColorModeValue\n} from '@chakra-ui/react';\nimport 'moment-timezone';\nimport { useContext, useState } from 'react';\nimport Moment from 'react-moment';\nimport ShowMoreText from 'react-show-more-text';\nimport { AuthContext } from '../../context/authContext';\nimport { StoryContext } from '../../context/storyContext';\nimport Alert from '../generic/alert';\nimport StoryModal from './storyModal';\n\nconst StoryList = (story) => {\n    const { user } = useContext(AuthContext);\n    const [showModal, setShowModal] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n    const { deleteStory } = useContext(StoryContext);\n    const color = useColorModeValue('white', 'gray.800');\n\n    return (\n        <Box minH=\"15vh\" w=\"55vw\" minWidth=\"350px\" pb={0.5} pt={1} pl={1} pr={1}>\n            <Center>\n                <Flex\n                    w=\"100%\"\n                    bg={color}\n                    padding=\"25px\"\n                    boxShadow=\"base\"\n                    direction=\"column\"\n                    borderRadius=\"md\"\n                >\n                    <Box pb=\"5\">\n                        <Stack direction=\"row\">\n                            <Avatar name={story.author} src=\"https://bit.ly/broken-link\" />\n                            <Flex direction=\"column\" pt=\"1\" pb=\"1\">\n                                <h1>\n                                    <b> {story.author}</b>\n                                </h1>\n                                <i>\n                                    <Moment fromNow fontStyle>\n                                        {story.postedAt}\n                                    </Moment>\n                                </i>\n                            </Flex>\n                        </Stack>\n                        <Flex direction=\"row\">\n                            <Heading color=\"blue.600\">\n                                <a href={`/stories/${story.id}`}  rel=\"noreferrer\">\n                                    {' '}\n                                    {story.title}\n                                </a>\n                            </Heading>\n                            <Box pl=\"10\">\n                                {user && user.username === story.author && (\n                                    <Flex direction=\"row\">\n                                        <Button\n                                            p=\"0\"\n                                            onClick={() => setShowModal(true)}\n                                            background=\"none\"\n                                            border=\"none\"\n                                            boxShadow=\"none !important\"\n                                        >\n                                            <Icon as={EditIcon} />\n                                        </Button>\n                                        {showModal && (\n                                            <StoryModal\n                                                close={() => {\n                                                    setShowModal(false);\n                                                    document.getElementById('root').style.filter =\n                                                        'none';\n                                                }}\n                                                storyId={story.id}\n                                                title={story.title}\n                                                story={story.story}\n                                            />\n                                        )}\n                                        <Button\n                                            p=\"0\"\n                                            boxShadow=\"none !important\"\n                                            background=\"none\"\n                                            border=\"none\"\n                                            onClick={() => setShowAlert(true)}\n                                        >\n                                            <Icon as={DeleteIcon} />\n                                        </Button>\n                                        {showAlert && (\n                                            <Alert\n                                                show={showAlert}\n                                                close={() => {\n                                                    setShowAlert(false);\n                                                }}\n                                                confirm={() => deleteStory(story.id)}\n                                            />\n                                        )}\n                                    </Flex>\n                                )}\n                            </Box>\n                        </Flex>\n                    </Box>\n\n                    <Box w=\"100%\">\n                        <ShowMoreText\n                            lines={3}\n                            more={\n                                <span>\n                                    {' '}\n                                    <b>See more</b>\n                                </span>\n                            }\n                            less={\n                                <span>\n                                    {' '}\n                                    <b>See less</b>\n                                </span>\n                            }\n                        >\n                            <Text whiteSpace=\"pre-line\" as=\"p\" fontSize=\"md\" noOfLines={6}>\n                                {story.story}\n                            </Text>\n                        </ShowMoreText>\n                    </Box>\n                </Flex>\n            </Center>\n        </Box>\n    );\n};\n\nexport default StoryList;\n","import { Box, Center, Flex, Spinner, useColorModeValue } from '@chakra-ui/react';\nimport { useContext, useEffect, useState } from 'react';\nimport { AuthContext } from '../../context/authContext';\nimport { StoryContext } from '../../context/storyContext';\nimport Pagination from '../pagination/pagination';\nimport StoryList from './storyList';\nimport StoryModal from './storyModal';\n\nconst AllStory = (props) => {\n    const { loggedIn } = useContext(AuthContext);\n    const { getStories, stories, storiesLoading } = useContext(StoryContext);\n    const [storiesPerPage] = useState(6);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [showModal, setShowModal] = useState(false);\n    const color = useColorModeValue('gray.200', 'gray.700');\n\n    useEffect(() => {\n        getStories();\n    }, []);\n\n    const indexOfLastStory = currentPage * storiesPerPage;\n    const indexOfFirstStory = indexOfLastStory - storiesPerPage;\n    const currentStories = stories.slice(indexOfFirstStory, indexOfLastStory);\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n    return storiesLoading ? (\n        <Center w=\"100%\" h=\"75vh\">\n            <Spinner />\n        </Center>\n    ) : (\n        <>\n            <Center pb=\"10\" ml=\"13%\" mr=\"13%\">\n                <Flex pt={10} direction=\"column\">\n                    {loggedIn && (\n                        <>\n                            {' '}\n                            <Box\n                                rounded=\"md\"\n                                boxShadow=\"md\"\n                                bg={color}\n                                onClick={() => setShowModal(true)}\n                                align=\"center\"\n                                p={3}\n                            >\n                                <i>Want to post a story ?</i>\n                            </Box>\n                        </>\n                    )}\n                    {showModal && (\n                        <StoryModal\n                            close={() => {\n                                setShowModal(false);\n                                document.getElementById('root').style.filter = 'none';\n                            }}\n                        />\n                    )}\n                    {/* <Text align=\"center\" mb=\"8px\">\n                        <Heading margin=\"3\">Stories</Heading>\n                    </Text> */}\n                    <Box bg=\"gray.200\" pl={0} mt=\"10vh\" pt={0} pb={0} borderRadius=\"md\" shadow=\"xl\">\n                        {currentStories.map((story) => (\n                            <StoryList {...story} key={story.id} />\n                        ))}\n                    </Box>\n                </Flex>\n            </Center>\n            <Center pb={10}>\n                <Pagination\n                    storiesPerPage={storiesPerPage}\n                    totalStories={stories.length}\n                    currentPage={currentPage}\n                    paginate={paginate}\n                />\n            </Center>\n        </>\n    );\n};\n\nexport default AllStory;\n","import Layout from '../components/generic/layout';\nimport AllStory from '../components/story/allStory';\nimport { StoryProvider } from '../context/storyContext';\n\nconst Stories = () => (\n    <StoryProvider>\n        <Layout>\n            <AllStory />\n        </Layout>\n    </StoryProvider>\n);\n\nexport default Stories;\n","import { DeleteIcon, EditIcon } from '@chakra-ui/icons';\nimport {\n    Avatar,\n    Box,\n    Button,\n    Center,\n    Flex,\n    Heading,\n    Icon,\n    Spinner,\n    Stack,\n    Text,\n    useColorModeValue\n} from '@chakra-ui/react';\nimport 'moment-timezone';\nimport { useContext, useEffect, useState } from 'react';\nimport Moment from 'react-moment';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { AuthContext } from '../../context/authContext';\nimport { StoryContext } from '../../context/storyContext';\nimport Alert from '../generic/alert';\nimport StoryModal from './storyModal';\n\nconst StoryView = () => {\n    const { user } = useContext(AuthContext);\n    const color = useColorModeValue('white', 'gray.800');\n    const [showModal, setShowModal] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n    const { deleteStory, singleStory, getSingleStory, storyLoading } = useContext(StoryContext);\n    const key = useParams().id;\n\n    useEffect(() => {\n        getSingleStory(key);\n    }, []);\n\n    return storyLoading ? (\n        <Center w=\"100%\" h=\"75vh\">\n            <Spinner />\n        </Center>\n    ) : !singleStory ? (\n        <Redirect to=\"/404\" />\n    ) : (\n        <Center>\n            <Box\n                m=\"12%\"\n                mt=\"8%\"\n                bg=\"gray.200\"\n                p=\"200\"\n                minH=\"15vh\"\n                w=\"55vw\"\n                minWidth=\"350px\"\n                p={1}\n                borderRadius=\"md\"\n                shadow=\"xl\"\n            >\n                <Box>\n                    <Flex\n                        w=\"100%\"\n                        bg={color}\n                        boxShadow=\"base\"\n                        p={6}\n                        direction=\"column\"\n                        borderRadius=\"md\"\n                    >\n                        <Box pb=\"5\">\n                            <Stack direction=\"row\">\n                                <Avatar\n                                    name={singleStory.author}\n                                    src=\"https://bit.ly/broken-link\"\n                                />\n                                <Flex direction=\"column\" pt=\"1\" pb=\"3\">\n                                    <h1>\n                                        <b> {singleStory.author}</b>\n                                    </h1>\n                                    <i>\n                                        <Moment fromNow fontStyle>\n                                            {singleStory.postedAt}\n                                        </Moment>\n                                    </i>\n                                </Flex>\n                            </Stack>\n                            <Flex direction=\"row\">\n                                <Heading color=\"blue.600\">{singleStory.title}</Heading>\n                                <Box pl=\"10\">\n                                    {user && user.username === singleStory.author && (\n                                        <Flex direction=\"row\">\n                                            <Button\n                                                p=\"0\"\n                                                onClick={() => setShowModal(true)}\n                                                background=\"none\"\n                                                border=\"none\"\n                                                boxShadow=\"none !important\"\n                                            >\n                                                <Icon as={EditIcon} />\n                                            </Button>\n                                            {showModal && (\n                                                <StoryModal\n                                                    close={() => {\n                                                        setShowModal(false);\n                                                        document.getElementById(\n                                                            'root'\n                                                        ).style.filter = 'none';\n                                                    }}\n                                                    storyId={singleStory.id}\n                                                    title={singleStory.title}\n                                                    story={singleStory.story}\n                                                />\n                                            )}\n                                            <Button\n                                                p=\"0\"\n                                                boxShadow=\"none !important\"\n                                                onClick={() => setShowAlert(true)}\n                                            >\n                                                <Icon as={DeleteIcon} />\n                                            </Button>\n                                            {showAlert && (\n                                                <Alert\n                                                    show={showAlert}\n                                                    close={() => {\n                                                        setShowAlert(false);\n                                                    }}\n                                                    confirm={() => deleteStory(singleStory.id)}\n                                                />\n                                            )}\n                                        </Flex>\n                                    )}\n                                </Box>\n                            </Flex>\n                        </Box>\n\n                        <Box w=\"100%\">\n                            <Text whiteSpace=\"pre-line\" as=\"p\" fontSize=\"lg\">\n                                {singleStory.story}\n                            </Text>\n                        </Box>\n                    </Flex>\n                </Box>\n            </Box>\n        </Center>\n    );\n};\n\nexport default StoryView;\n","import Layout from '../components/generic/layout';\nimport StoryView from '../components/story/storyView';\nimport { StoryProvider } from '../context/storyContext';\n\nconst Story = () => (\n    <StoryProvider>\n        <Layout>\n            <StoryView />\n        </Layout>\n    </StoryProvider>\n);\n\nexport default Story;\n","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport MyNavbar from './components/generic/navbar';\nimport NotFound from './pages/404';\nimport SignIn from './pages/signIn';\nimport SignUp from './pages/signUp';\nimport Stories from './pages/stories';\nimport Story from './pages/story';\n\nfunction App() {\n    return (\n        <Router>\n            <MyNavbar />\n            <Switch>\n                <Route exact path=\"/stories/:id\" component={Story} />\n                <Route exact path=\"/signup\" component={SignUp} />\n                <Route exact path=\"/signin\" component={SignIn} />\n                <Route exact path=\"/\" component={Stories} />\n                <Route path=\"*\" component={NotFound} />\n            </Switch>\n            {/* <Footer /> */}\n        </Router>\n    );\n}\n\nexport default App;\n","import { extendTheme } from '@chakra-ui/react';\n\nconst config = {\n    initialColorMode: 'white',\n    useSystemColorMode: false,\n};\n\nconst theme = extendTheme({ config });\n\nexport default theme;\n","import { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport theme from './components/generic/theme';\nimport { AuthProvider } from './context/authContext';\nimport './index.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ChakraProvider>\n            <AuthProvider>\n                <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n                <App />\n            </AuthProvider>\n        </ChakraProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}